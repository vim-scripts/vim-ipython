This is a mirror of http://www.vim.org/scripts/script.php?script_id=3709

    * github: http://github.com/ivanov/vim-ipython
    * demos: http://pirsquared.org/vim-ipython/
    * blogpost: http://pirsquared.org/blog/2011/07/28/vim-ipython
    * author: Paul Ivanov (http://pirsquared.org)

Using this plugin, you can send lines or whole files for IPython to execute, and also get back object introspection and word completions in Vim, like what you get with: object?<enter> and object.<tab> in IPython.

The big change from previous versions of ipy.vim is that it no longer the old requires the brittle ipy_vimserver.py instantiation, and since it uses just vim and python, it is platform independent (i.e. should work even on windows, unlike the previous *nix only solution). The requirements are IPython 0.11+ with zeromq capabilities, vim compiled with +python.

If you can launch ipython qtconsole and :echo has('python') returns 1 in vim, you should be good to go.

Start ipython qtconsole and copy the connection string. Source ipy.vim file, which provides new IPython command:

:source ipy.vim
(or copy it to ~/.vim/ftplugin/python to load automatically)

:IPythonClipboard
(or :IPythonXSelection if you're using X11 without having to copy)

The :IPython command allows you to put the full string, e.g.:

:IPython --existing --shell=41882 --iopub=43286 --stdin=34987 --hb=36697

The :IPythonClipboard command just uses the + register to get the connection string, whereas :IPythonXSelection uses the * register

Sending lines to IPython

Now type out a line and send it to IPython using <Ctrl-S> from Command mode:

import os

You should see a notification message confirming the line was sent, along with the input number for the line, like so In[1]: import os.

<Ctrl-S> also works from insert mode, but doesn't show notification, unless monitor_subchannel is set to True (see vim-ipython 'shell', below)

It also works blockwise in Visual Mode. Select and send these lines using <Ctrl-S>:

import this,math # secret decoder ring
a,b,c,d,e,f,g,h,i = range(1,10)
code =(c,a,d,a,e,i,)
msg = '...jrer nyy frag sebz Ivz.\nIvz+VClguba=%fyl '+this.s.split()[g]
decode=lambda x:"\n"+"".join([this.d.get(c,c) for c in x])+"!"
format=lambda x:'These lines:\n  '+'\n  '.join([l for l in x.splitlines()])
secret_decoder = lambda a,b: format(a)+decode(msg)%str(b)[:-1]
'%d'*len(code)%code == str(int(math.pi*1e5))

Then, go to the qtconsole and run this line:

print secret_decoder(_i,_)

You can also send whole files to IPython's %run magic using <F5>.
IPython's object? Functionality

If you're using gvim, mouse-over a variable to see IPython's ? equivalent. If you're using vim from a terminal, or want to copy something from the docstring, type <leader>d. <leader> is usually \ (the backslash key). This will open a quickpreview window, which can be closed by hitting q or <escape>.
IPython's tab-completion Functionality

vim-ipython activates a 'completefunc' that queries IPython. A completefunc is activated using Ctrl-X Ctrl-U in Insert Mode (vim default). You can combine this functionality with SuperTab to get tab completion.
vim-ipython 'shell'

NEW since IPython 0.11!

By monitoring km.sub_channel, we can recreate what messages were sent to IPython, and what IPython sends back in response.

monitor_subchannel is a parameter that sets whether this 'shell' should updated on every sent command (default: True).

If at any later time you wish to bring this shell up, including if you've set monitor_subchannel=False, hit <leader>s.
Options

You can change these at the top of the ipy.vim:

reselect = False            # reselect lines after sending from Visual mode
show_execution_count = True # wait to get numbers for In[43]: feedback?
monitor_subchannel = True   # update vim-ipython 'shell' on every send?
run_flags= "-i"             # flags to for IPython's run magic when using <F5>


